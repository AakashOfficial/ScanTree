#!/usr/bin/env node

"use strict";

var path = require("path"),
	args = require("minimist")(process.argv,{
		boolean: [ "recursive", "full-paths", "groups" ],
		string: [ "file", "dir", "base-dir", "output", "exclude" ],
		default: {
			"recursive": false,
			"full-paths": false,
			"groups": true,
			"exclude": []
		},
		alias: {
			"recursive": "R",
			"full-paths": "F",
			"groups": "G",
			"no-groups": "N"
		}
	}),
	scantree = require(path.join(__dirname,"..","lib","index.js"))
;

main();

// ***********************************

function printHelp() {
	console.log(
		"scantree: scan JS files to build dependency tree\n",
		"(c) 2015 Kyle Simpson | http://getify.mit-license.org/\n",
		"\n",
		"usage: scantree [--file|--dir]=path [opt ...]\n",
		"\n",
		"options:\n",
		"--help                    show this help\n",
		"\n",
		"--file=file               scan a single file\n",
		"--dir=directory           scan all files in a directory\n",
		"--exclude=pattern         exclude any included paths that match pattern (JS regex)\n",
		"\n",
		"--base-dir=directory      search relative dependency paths starting from this location\n",
		"--output=[simple|json]    output simple linear list of null-separated values, or JSON\n",
		"                          (default: json)\n",
		"\n",
		"-R, --recursive           directory scan is recursive\n",
		"                          (default: off)\n",
		"-F, --full-paths          include full paths in all dependencies; otherwise strip\n",
		"                          BASE-DIR from paths\n",
		"                          (default: off)\n",
		"-G, --groups              group parallel dependencies -- those which don't depend on\n",
		"                          each other and can thus run in arbitrary order\n",
		"                          (JSON only, default: on)\n",
		"-N, --no-groups           don't group parallel dependencies\n",
		"                          (JSON only)\n"
	);
}

function validateParams() {
	if (args.help) {
		QUIT();
	}
	else if (!(
			"file" in args ||
			"dir" in args
	)) {
		QUIT("Required: '--file' or '--dir'");
	}
	else if (
		args.file != null &&
		(
			args.file === "" ||
			(
				typeof args.file != "string" &&
				!Array.isArray(args.file)
			) ||
			(
				Array.isArray(args.file) &&
				~args.file.indexOf("")
			)
		)
	) {
		QUIT("Each '--file' must specify a non-empty value");
	}
	else if (
		args.dir != null &&
		(
			args.dir === "" ||
			(
				typeof args.dir != "string" &&
				!Array.isArray(args.dir)
			) ||
			(
				Array.isArray(args.dir) &&
				~args.dir.indexOf("")
			)
		)
	) {
		QUIT("Each '--dir' must specify a non-empty value");
	}
	else if (
		args.exclude != null &&
		(
			args.exclude === "" ||
			(
				typeof args.exclude != "string" &&
				!Array.isArray(args.exclude)
			) ||
			(
				Array.isArray(args.exclude) &&
				~args.exclude.indexOf("")
			)
		)
	) {
		QUIT("Each '--exclude' must specify a non-empty value");
	}
	else if (
		"base-dir" in args &&
		(
			args["base-dir"] === "" ||
			typeof args["base-dir"] != "string"
		)
	) {
		QUIT("'--base-dir' must be included only once and must specify a non-empty value");
	}
	else if (
		"recursive" in args &&
		typeof args.recursive != "boolean"
	) {
		QUIT("'--recursive (-R)' must have no value");
	}
	else if (
		"full-paths" in args &&
		typeof args["full-paths"] != "boolean"
	) {
		QUIT("'--full-paths (-F)' must have no value");
	}
	else if (
		args.output &&
		!(
			args.output === "simple" ||
			args.output === "json"
		)
	) {
		QUIT("'--output' must be included only once and be either 'simple' or 'json'");
	}
	else if (
		"groups" in args &&
		typeof args["groups"] != "boolean"
	) {
		QUIT("'--groups (-G)' must have no value");
	}
}

function processParams() {
	// fix -N ==> --no-groups
	// (https://github.com/substack/minimist/issues/55)
	if (args.N) {
		delete args.N;
		delete args["no-groups"];
		args.groups = args.G = false;
	}

	// verify CLI usage
	validateParams();
}

function QUIT(fatal,hideHelp) {
	if (fatal) {
		console.error(fatal);
		console.error("");
	}
	if (!hideHelp) {
		printHelp();
	}
	process.exit(fatal ? 1 : 0);
}

function main() {
	var output;

	processParams();

	try {
		output = scantree.scan({
			files: args.file,
			dirs: args.dir,
			excludes: args.exclude,
			base_dir: args["base-dir"],
			output: args.output,
			recursive: args.recursive,
			full_paths: args["full-paths"],
			groups: args.groups,

			ignore: {
				invalid: true,
				missing: false
			}
		});
		process.stdout.write(output);
	}
	catch (err) {
		QUIT(err.message);
	}
}
